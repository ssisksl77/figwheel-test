{:rename-macros {}, :renames {}, :use-macros {sel1 dommy.core, sel dommy.core}, :excludes #{}, :name figwheel-project.core, :imports nil, :requires {dommy dommy.core, dommy.core dommy.core, reagent reagent.core, reagent.core reagent.core}, :uses nil, :defs {set-borders! {:protocol-inline nil, :meta {:file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :line 6, :column 7, :end-line 6, :end-column 19, :arglists (quote ([]))}, :name figwheel-project.core/set-borders!, :variadic false, :file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, add-btn! {:protocol-inline nil, :meta {:file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :line 14, :column 7, :end-line 14, :end-column 15, :arglists (quote ([]))}, :name figwheel-project.core/add-btn!, :variadic false, :file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, foo {:protocol-inline nil, :meta {:file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :line 28, :column 7, :end-line 28, :end-column 10, :arglists (quote ([]))}, :name figwheel-project.core/foo, :variadic false, :file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :end-column 10, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, bar {:protocol-inline nil, :meta {:file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :line 32, :column 7, :end-line 32, :end-column 10, :arglists (quote ([]))}, :name figwheel-project.core/bar, :variadic false, :file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :end-column 10, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, baz {:protocol-inline nil, :meta {:file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :line 36, :column 7, :end-line 36, :end-column 10, :arglists (quote ([]))}, :name figwheel-project.core/baz, :variadic false, :file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :end-column 10, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, home {:protocol-inline nil, :meta {:file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :line 40, :column 7, :end-line 40, :end-column 11, :arglists (quote ([]))}, :name figwheel-project.core/home, :variadic false, :file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, main {:protocol-inline nil, :meta {:file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :line 47, :column 16, :end-line 47, :end-column 20, :export true, :arglists (quote ([]))}, :name figwheel-project.core/main, :variadic false, :file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, my-alert {:protocol-inline nil, :meta {:file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :line 52, :column 16, :end-line 52, :end-column 24, :export true, :arglists (quote ([]))}, :name figwheel-project.core/my-alert, :variadic false, :file "D:\\clojureworks\\figwheel-project\\src\\figwheel_project\\core.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {dommy dommy.core, dommy.core dommy.core, reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:changeme :div :click :reagent-render :border}, :order [:border :changeme :click :reagent-render :div]}, :doc nil}